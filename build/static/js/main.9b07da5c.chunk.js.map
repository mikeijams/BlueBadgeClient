{"version":3,"sources":["helpers/enviornments.js","Beers/BeerCreate.js","home/Navbar.js","home/Signup.js","home/Login.js","Auth/Auth.js","Beers/BeerCard.js","Beers/BeerIndex.js","App.js","serviceWorker.js","index.js"],"names":["APIURL","window","location","hostname","BeerCreate","props","useState","name","setName","brewery","setBrewery","abvibu","setAbvibu","setLocation","comments","setComments","Modal","isOpen","ModalHeader","ModalBody","Form","onSubmit","e","preventDefault","fetch","method","body","JSON","stringify","beer","headers","Headers","token","then","res","json","logData","console","log","fetchBeer","FormGroup","Label","htmlFor","Input","value","onChange","target","Button","type","Sitebar","setIsOpen","setShow","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","clickLogout","Signup","username","setUsername","password","setPassword","event","user","response","data","updateToken","sessionToken","Login","Auth","Container","Row","Col","md","span","offset","BeerCard","BeerIndex","workouts","setWorkouts","useEffect","App","setSessionToken","localStorage","getItem","newToken","setItem","style","backgroundColor","clear","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9b07da5c.chunk.js","sourcesContent":["let APIURL = '';\n\nswitch (window.location.hostname) {\n    // this is the local host name of your react app\n    case 'localhost' || '127.0.0.1':\n        // this is the local host name of your API\n        APIURL = 'http://localhost:3001';\n        break;\n    // this is the deployed react application\n    case 'https://draft-list.herokuapp.com/':\n        // this is the full url of your deployed API\n         APIURL = ' https://draft-list.herokuapp.com/'\n}\n\nexport default APIURL;","import React, { useState, useEffect } from 'react';  \nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Button,\n  } from \"reactstrap\";\n  import APIURL from '../helpers/enviornments';\n\n\nconst BeerCreate = (props) => {\n    const [name, setName] = useState('');\n    const [brewery, setBrewery] = useState('');\n    const [abvibu, setAbvibu] = useState('');\n    const [location, setLocation] = useState();\n    const [comments, setComments] = useState();\n\n\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        fetch(`${APIURL}/beer/create`, {\n            method: 'POST',\n            body: JSON.stringify({beer:{name: name, brewery: brewery, abvibu: abvibu, location: location, comments: comments}}),\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': props.token\n            })\n        }).then((res) => res.json())\n        .then((logData) => {\n            console.log(logData);\n            setName('');\n            setBrewery('');\n            setAbvibu('');\n            setLocation('');\n            setComments('');\n            props.fetchBeer();\n        })\n    }\n\n    return (   \n        <div>\n    <Modal isOpen={false}>\n      <ModalHeader>Post a Beer</ModalHeader>\n      <ModalBody>\n        <Form onSubmit={handleSubmit}>\n          <FormGroup>\n            <Label htmlFor=\"Name\">Name:</Label>\n            <Input\n              name=\"name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </FormGroup>\n\n \n          \n          <Button type=\"submit\">Post</Button>\n        </Form>\n      </ModalBody>\n    </Modal>\n  );\n\n        </div>\n      );\n}\n \nexport default BeerCreate;","import React, {useState} from 'react';\nimport { Navbar, NavbarBrand, NavbarToggler, NavItem, Button, Nav, Collapse } from \"reactstrap\";\nimport BeerCreate from '../Beers/BeerCreate';\n\n\nconst Sitebar = (props) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => {\n        let newIsOpen = !isOpen;\n        setIsOpen(newIsOpen);\n    }\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n\n    return ( \n        <Navbar color=\"faded\" light expand=\"md\">\n            <NavbarBrand href=\"/\">Welcome</NavbarBrand>\n            <NavbarToggler onClick={toggle}/>\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                    <Button onClick={props.clickLogout}>Logout</Button>\n                </NavItem>\n                <NavItem>\n                    <Button onClick={handleShow}>New Post</Button>\n                </NavItem>\n                </Nav>\n            </Collapse>\n        </Navbar>\n\n\n\n);\n\n        \n}\n\n\nexport default Sitebar;","import React, {useState} from 'react';\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap'\nimport APIURL from '../helpers/enviornments';\n\nconst Signup = (props) => {\n   const [username, setUsername] = useState('');\n   const [password, setPassword] = useState('');\n\n   const handleSubmit = (event) => {\n    event.preventDefault();\n    fetch(`${APIURL}/signup`, {\n        method: 'POST',\n        body: JSON.stringify({user: {username: username, password: password}}),\n        headers: new Headers({\n            'Content-Type': 'application/json'\n        })\n    }).then(\n        (response) => response.json()\n    ).then((data) => {\n        props.updateToken(data.sessionToken)\n    })\n}\n\n    return ( \n        <div>\n            <h1>Sign Up</h1>\n            <Form onSubmit={handleSubmit}>\n                <FormGroup>\n                    <Label htmlFor=\"username\">Username</Label>\n                    <Input onChange={(e) => setUsername(e.target.value)} name=\"username\" value={username}/>\n                </FormGroup>\n                <FormGroup>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input onChange={(e) => setPassword(e.target.value)} name=\"password\" value={password}/>\n            </FormGroup>\n            <Button type=\"submit\">SignUp</Button>\n            </Form>\n        </div>\n     );\n}\n \nexport default Signup;","import React, {useState, useEffect, useCallback} from 'react';\nimport {Form, FormGroup, Label, Input, Button} from 'reactstrap'\nimport APIURL from '../helpers/enviornments';\n\nconst Login = (props) => {\n   const [username, setUsername] = useState('')\n   const [password, setPassword] = useState('')\n\n   const handleSubmit= (event) => {\n    event.preventDefault();\n    fetch(`${APIURL}/login`, {\n        method: 'POST',\n        body: JSON.stringify({user: {username: username, password: password}}),\n        headers: new Headers({\n            'Content-Type': 'application/json'\n        })\n    }).then(\n        (response) => response.json()\n    ).then((data) => {\n        props.updateToken(data.sessionToken);\n    })\n}\n\n    return ( <div>\n\n        <h1>Login</h1>\n        <Form onSubmit={handleSubmit}>\n            <FormGroup>\n                <Label htmlFor=\"username\">Username</Label>\n                <Input onChange={(e) => setUsername(e.target.value)} name=\"username\" value={username}/>\n            </FormGroup>\n            <FormGroup>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input onChange={(e) => setPassword(e.target.value)} name=\"password\" value={password}/>\n            </FormGroup>\n            <Button type=\"submit\">Login</Button>\n        </Form>\n    </div>\n\n     );\n}\n \nexport default Login;","import React from \"react\";\nimport { Container, Col, Row } from \"reactstrap\";\nimport Signup from \"../home/Signup\";\nimport Login from \"../home/Login\";\n\nconst Auth = (props) => {\n  return (\n    <Container className=\"text-center\">\n      <Row>\n        <Col md={{ span: 6, offset: 5 }} >\n          <Signup updateToken={props.updateToken}/>\n        </Col>\n      </Row>\n\n      <Row className=\"align-items-center\">\n        <Col md={{ span: 6, offset: 5 }} >\n          <Login updateToken={props.updateToken}/>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Auth;\n","import React from \"react\";\nimport {\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  CardTitle,\n  CardSubtitle,\n  Button,\n} from \"reactstrap\";\n\nconst BeerCard = (props) => {\n  \n  return ( \n      <div>\n \n    </div>\n   );\n};\n\nexport default BeerCard;\n","import React, {useState, useEffect} from 'react'; \nimport BeerCreate from './BeerCreate'   \nimport { Container, Row, Col } from 'reactstrap';\nimport BeerCard from './BeerCard';\nimport APIURL from '../helpers/enviornments';\n\nconst BeerIndex = (props) => {\n\n    const [workouts, setWorkouts] = useState([]);\n\n    const fetchBeer = () => {\n        \n        fetch(`${APIURL}/beer/`, {\n            method: 'GET',\n            headers: new Headers({\n                'Content-Type': 'application/json',\n                'Authorization': props.token\n            })\n        }).then(\n            (res) => res.json()\n        ).then((logData) => {\n            setWorkouts(logData);\n            console.log(logData)\n        })\n\n    }\n\n    useEffect(() => {\n        fetchBeer();\n    }, [])\n\n    return ( \n        <Container>\n        <Row>\n            <Col md=\"3\">\n               <BeerCreate fetchBeer={fetchBeer} token={props.token}/>\n            </Col>\n            <Col md=\"9\">\n               <BeerCard workouts={workouts} fetchBeer={fetchBeer} token={props.token}/>\n            </Col>\n\n        </Row>\n    </Container>\n     );\n}\n \nexport default BeerIndex;","import React, { useCallback, useEffect, useState } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Sitebar from './home/Navbar';\nimport Auth from './Auth/Auth';\nimport BeerIndex from './Beers/BeerIndex'\n\n\n\n\n\nfunction App() {\nconst [sessionToken, setSessionToken] = useState('');\n\nuseEffect(() => {\n  if (localStorage.getItem('token')){\n    setSessionToken(localStorage.getItem('token'));\n  }\n}, [])\n\nconst updateToken = (newToken) => {\n  localStorage.setItem('token', newToken);\n  setSessionToken(newToken);\n  console.log(sessionToken)\n}\n\nconst clearToken = () => {\n  localStorage.clear();\n  setSessionToken('');\n}\n\nconst protectedViews = () => {\n  return (sessionToken === localStorage.getItem('token') ? <BeerIndex token={sessionToken}/>\n  : <Auth updateToken={updateToken}/>)\n}\n\n  return (\n    <div className=\"App\" style={{backgroundColor: '#3D7068' }}>\n      <Sitebar clickLogout={clearToken}/>\n      {protectedViews()}\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}